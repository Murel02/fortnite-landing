<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Fortnite Random Drop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <!-- Header / Hero -->
    <header class="hero container">
      <h1>Fortnite Random Drop</h1>
      <p class="subtitle">Pick a spot and drop in!</p>
    </header>

    <!-- Controls -->
    <section class="controls container">
      <button id="randomBtn" class="btn btn-primary">Pick a random spot</button>

      <label class="control-group">
        <span>Marker colour</span>
        <input type="color" id="markerColorPicker" value="#ff0000" />
      </label>
    </section>

    <!-- Selected location -->
    <p class="section-heading container" id="locationLabel">
      Your random drop location is: <%= location.id %>
    </p>

    <!-- Map (full-bleed on mobile for max space) -->
    <section class="map-bleed">
      <div class="map-container">
        <img
          id="mapImg"
          src="/images/fortnite-map.png"
          alt="Fortnite Map"
          width="1300"
          height="1300"
        />

        <div
          class="random-marker"
          id="marker"
          data-x="<%= location.x %>"
          data-y="<%= location.y %>"
          aria-label="Selected drop location"
        ></div>
      </div>
    </section>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // Marker positioning
      const marker = document.getElementById("marker");
      function positionMarker(x, y) {
        marker.style.left = x * 100 + "%";
        marker.style.top = y * 100 + "%";
      }
      positionMarker(
        parseFloat(marker.dataset.x),
        parseFloat(marker.dataset.y)
      );

      // Colour picker persistence
      const markerColorPicker = document.getElementById("markerColorPicker");
      const savedColor = localStorage.getItem("markerColor");
      if (savedColor) {
        document.documentElement.style.setProperty(
          "--marker-color",
          savedColor
        );
        markerColorPicker.value = savedColor;
      }
      markerColorPicker.addEventListener("input", (e) => {
        const value = e.target.value;
        document.documentElement.style.setProperty("--marker-color", value);
        localStorage.setItem("markerColor", value);
      });

      // Socket events
      const socket = io();
      socket.on("update", (loc) => {
        document.getElementById("locationLabel").textContent =
          "Your random drop location is: " + loc.id;
        positionMarker(loc.x, loc.y);
        marker.classList.add("bounce-once");
        setTimeout(() => marker.classList.remove("bounce-once"), 500);
      });

      document.getElementById("randomBtn").addEventListener("click", () => {
        socket.emit("newRandom");
      });

      // Optional: click map to preview coords (fixed template literal)
      const mapImg = document.getElementById("mapImg");
      const coordBtn = document.getElementById("coordBtn");
      if (coordBtn) {
        mapImg.addEventListener("click", (event) => {
          const rect = mapImg.getBoundingClientRect();
          const nx = (event.clientX - rect.left) / rect.width;
          const ny = (event.clientY - rect.top) / rect.height;
          coordBtn.textContent = `x: ${nx.toFixed(2)}, y: ${ny.toFixed(2)}`;
        });
      }
    </script>
  </body>
</html>
