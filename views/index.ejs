<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="theme-color" content="#0b0226" />
    <link rel="manifest" href="/manifest.webmanifest" />
    <title>Fortnite Random Drop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/css/style.css?v=4" />
    <% if (typeof __dev !== "undefined" && __dev) { %>
    <link rel="stylesheet" href="/css/devmode.css" />
    <% } %>
  </head>
  <body
    data-current-map="<%= currentMap || 'current' %>"
    data-map-image="<%= (typeof mapImage !== 'undefined' && mapImage) || '' %>"
  >
    <!-- Header -->
    <header class="hero container hero--compact">
      <div class="hero__bar">
        <h1 class="app-title">Drop Picker</h1>
        <button id="themeToggle" class="icon-btn" aria-label="Toggle theme">
          ðŸŒ™
        </button>
      </div>
    </header>

    <%- include("partials/devpanel") %>

    <!-- Map -->
    <main class="map-bleed">
      <div class="map-container">
        <img
          id="mapImg"
          src="<%= (typeof mapImage !== 'undefined' && mapImage) || '' %>"
          alt="Fortnite Map"
        />
        <div
          class="random-marker"
          id="marker"
          data-x="<%= location.x %>"
          data-y="<%= location.y %>"
        ></div>
      </div>
    </main>

    <!-- Location text bar -->
    <div class="location-bar">
      Drop: <span id="locationText"><%= (location.name || location.id) %></span>
    </div>

    <!-- Player Stats (via Fortnite API) -->
    <section id="statsSection" class="container stats-section">
      <form id="statsForm" class="stats-form">
        <strong class="stats-title">Player Stats</strong>
        <input
          id="statsName"
          class="stats-input"
          name="name"
          type="text"
          placeholder="Epic username"
          autocomplete="off"
        />
        <button type="submit" class="btn btn-secondary stats-btn">
          Lookup
        </button>
        <span id="statsStatus" class="stats-status"></span>
      </form>
      <div id="statsResult" class="stats-grid"></div>
    </section>

    <!-- Bottom sheet: controls -->
    <section class="sheet" id="sheet">
      <!-- New labeled handle -->
      <button
        class="sheet-handle"
        id="sheetToggle"
        aria-expanded="false"
        aria-controls="sheetContent"
      >
        <div class="sheet-handle__inner">
          <span class="sheet-handle__dot"></span>
          <span class="sheet-handle__label"></span>
          <span class="sheet-handle__chev" aria-hidden="true">âŒ„</span>
        </div>
      </button>

      <div class="sheet-content" id="sheetContent">
        <div class="control-row">
          <label>
            Marker Color
            <input type="color" id="markerColorPicker" value="#ff0000" />
          </label>

          <div>
            <label>Map</label>
            <div style="opacity: 0.8">Current (from API)</div>
          </div>
        </div>

        <button id="installBtn" class="btn btn-secondary" hidden>
          ðŸ“² Install app
        </button>
      </div>
    </section>

    <!-- Bottom bar: primary action -->
    <div class="bottom-bar">
      <button id="fabRandom" class="primary-cta" aria-label="Pick random">
        ðŸŽ² Drop
      </button>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // --- THEME ---
      const themeBtn = document.getElementById("themeToggle");
      const themeMeta = document.querySelector('meta[name="theme-color"]');

      (function initTheme() {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme)
          document.documentElement.setAttribute("data-theme", savedTheme);
        setThemeIcon();
        applyThemeMeta();
      })();

      function setThemeIcon() {
        const isLight =
          document.documentElement.getAttribute("data-theme") === "light";
        themeBtn.textContent = isLight ? "ðŸŒ™" : "ðŸŒž";
      }
      function applyThemeMeta() {
        const isLight =
          document.documentElement.getAttribute("data-theme") === "light";
        themeMeta.setAttribute("content", isLight ? "#ffffff" : "#0b0226");
      }
      themeBtn.addEventListener("click", () => {
        const current = document.documentElement.getAttribute("data-theme");
        const next = current === "light" ? "dark" : "light";
        document.documentElement.setAttribute("data-theme", next);
        localStorage.setItem("theme", next);
        setThemeIcon();
        applyThemeMeta();
      });

      // --- Bottom sheet toggle ---
      const sheet = document.getElementById("sheet");
      const sheetToggle = document.getElementById("sheetToggle");
      sheetToggle.addEventListener("click", () => {
        const open = sheet.classList.toggle("open");
        sheetToggle.setAttribute("aria-expanded", String(open));
      });

      // --- Copy location on tap ---
      const locTextEl = document.getElementById("locationText");
      locTextEl.style.cursor = "pointer";
      locTextEl.title = "Tap to copy";
      locTextEl.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(locTextEl.textContent);
        } catch {}
        if (navigator.vibrate) navigator.vibrate(40);
      });

      // --- Haptics helper ---
      function ping() {
        if (navigator.vibrate) navigator.vibrate(80);
      }

      // --- DOM refs ---
      const marker = document.getElementById("marker");
      const mapImg = document.getElementById("mapImg");
      const mapSelect = { value: "current" };

      function positionMarker(x, y) {
        marker.style.left = x * 100 + "%";
        marker.style.top = y * 100 + "%";
      }

      // Init marker from server data
      positionMarker(
        parseFloat(marker.dataset.x),
        parseFloat(marker.dataset.y)
      );

      // --- Color picker persistence ---
      const markerColorPicker = document.getElementById("markerColorPicker");
      const savedColor = localStorage.getItem("markerColor");
      if (savedColor) {
        document.documentElement.style.setProperty(
          "--marker-color",
          savedColor
        );
        markerColorPicker.value = savedColor;
      }
      markerColorPicker.addEventListener("input", (e) => {
        const value = e.target.value;
        document.documentElement.style.setProperty("--marker-color", value);
        localStorage.setItem("markerColor", value);
      });

      // Stronger reconnection settings (websocket-first)
      const socket = io({
        transports: ["websocket"],
        reconnection: true,
        reconnectionAttempts: Infinity,
        reconnectionDelay: 500,
        reconnectionDelayMax: 5000,
        timeout: 20000,
      });

      const fab = document.getElementById("fabRandom");
      fab.addEventListener("click", () => {
        const mapId = document.body.dataset.currentMap || "current";
        socket.emit("newRandom", { mapId }, (res) => {
          if (!res || !res.ok) {
            // ask server to re-send a location if the first try failed
            socket.emit("joinMap", { mapId });
          }
        });
        ping();
      });

      function ensureConnected() {
        if (socket.disconnected) socket.connect();
      }

      // Rejoin map after reconnect
      socket.on("reconnect", () => {
        const mapId = document.body.dataset.currentMap || "current";
        socket.emit("joinMap", { mapId });
      });

      // Watchdog: reload if app was frozen for too long
      let lastAlive = Date.now();
      const STALE_MS = 45 * 1000;

      function joinCurrentRoom() {
        const mapId = document.body.dataset.currentMap || "current";
        socket.emit("joinMap", { mapId });
      }
      // replace your existing reconnect handler with this:
      socket.on("connect", () => {
        lastAlive = Date.now();
        joinCurrentRoom(); // <-- make sure weâ€™re in the room on any (re)connect
      });
      socket.on("update", () => (lastAlive = Date.now()));

      window.addEventListener("visibilitychange", () => {
        if (document.visibilityState === "visible") {
          ensureConnected();
          if (Date.now() - lastAlive > STALE_MS) location.reload();
        }
      });

      window.addEventListener("pageshow", (e) => {
        if (e.persisted) return location.reload();
        ensureConnected();
      });

      window.addEventListener("focus", joinCurrentRoom);

      window.addEventListener("online", ensureConnected);

      // Socket updates
      socket.on("update", (loc) => {
        if (loc.mapId) {
          document.body.dataset.currentMap = loc.mapId; // single map for now
        }
        if (loc.mapImage) {
          mapImg.src = loc.mapImage; // server-controlled (remote API URL)
        }
        document.getElementById("locationText").textContent =
          loc.name || loc.id;

        positionMarker(Number(loc.x), Number(loc.y));
        marker.classList.add("bounce-once");
        setTimeout(() => marker.classList.remove("bounce-once"), 500);
        ping();
      });

      // --- PWA install flow ---
      const installBtn = document.getElementById("installBtn");
      let deferredPrompt = null;

      const isStandalone =
        window.matchMedia("(display-mode: standalone)").matches ||
        window.navigator.standalone === true;
      if (isStandalone) installBtn.hidden = true;

      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/sw.js").then(() => {
          if (
            !navigator.serviceWorker.controller &&
            !sessionStorage.getItem("sw-reload")
          ) {
            navigator.serviceWorker.addEventListener("controllerchange", () => {
              sessionStorage.setItem("sw-reload", "1");
              window.location.reload();
            });
          }
        });
      }

      window.addEventListener("beforeinstallprompt", (e) => {
        e.preventDefault();
        deferredPrompt = e;
        installBtn.hidden = false;
      });

      installBtn.addEventListener("click", async () => {
        if (!deferredPrompt) return;
        deferredPrompt.prompt();
        await deferredPrompt.userChoice;
        deferredPrompt = null;
        installBtn.hidden = true;
      });

      window.addEventListener("appinstalled", () =>
        console.log("[PWA] appinstalled")
      );

      // --- Stats lookup ---
      (function initStats() {
        const form = document.getElementById("statsForm");
        if (!form) return;
        const nameEl = document.getElementById("statsName");
        const platEl = document.getElementById("statsPlatform");
        const statusEl = document.getElementById("statsStatus");
        const outEl = document.getElementById("statsResult");

        function render(data) {
          const s = data.all || {};
          outEl.innerHTML = `
                  <div class="stat-card"><span class="stat-label">Matches</span><span class="stat-value">${
                    s.matches ?? "-"
                  }</span></div>
                  <div class="stat-card"><span class="stat-label">Wins</span><span class="stat-value">${
                    s.wins ?? "-"
                  }</span></div>
                  <div class="stat-card"><span class="stat-label">Win %</span><span class="stat-value">${
                    s.winRate ?? "-"
                  }</span></div>
                  <div class="stat-card"><span class="stat-label">Kills</span><span class="stat-value">${
                    s.kills ?? "-"
                  }</span></div>
                  <div class="stat-card"><span class="stat-label">K/D</span><span class="stat-value">${
                    s.kd ?? "-"
                  }</span></div>
                  <div class="stat-card"><span class="stat-label">Top 10</span><span class="stat-value">${
                    s.top10 ?? "-"
                  }</span></div>
                  <div class="stat-card"><span class="stat-label">Score</span><span class="stat-value">${
                    s.score ?? "-"
                  }</span></div>
                `;
        }

        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const name = nameEl.value.trim();
          const platform = "epic";
          if (!name) return;
          statusEl.textContent = "Loadingâ€¦";
          outEl.innerHTML = "";
          try {
            const res = await fetch(
              `/api/stats?name=${encodeURIComponent(
                name
              )}&platform=${encodeURIComponent(platform)}`,
              { cache: "no-store" }
            );
            if (!res.ok) throw new Error("Request failed");
            const data = await res.json();
            render(data);
            statusEl.textContent = `${
              data.name
            } â€¢ ${data.platform.toUpperCase()}`;
          } catch (err) {
            statusEl.textContent = "Not found or error";
          }
        });
      })();
    </script>
    <% if (typeof __dev !== "undefined" && __dev) { %>
    <script src="/js/devmode.js" defer></script>
    <% } %>
  </body>
</html>
