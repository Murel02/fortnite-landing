<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="theme-color" content="#0b0226" />
    <link rel="manifest" href="/manifest.webmanifest" />
    <title>Fortnite Random Drop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body data-current-map="<%= currentMap || 'current' %>">
    <!-- Header -->
    <header class="hero container hero--compact">
      <div class="hero__bar">
        <h1 class="app-title">Drop Picker</h1>
        <button id="themeToggle" class="icon-btn" aria-label="Toggle theme">
          ðŸŒ™
        </button>
      </div>
    </header>

    <!-- Map -->
    <main class="map-bleed">
      <div class="map-container">
        <!-- Location pill overlay -->
        <div
          id="locationPill"
          class="location-pill"
          role="status"
          aria-live="polite"
        >
          <span class="pill-label">Drop:</span>
          <span id="locationText"><%= location.id %></span>
        </div>

        <img
          id="mapImg"
          src="/images/fortnite-map.png"
          alt="Fortnite Map"
          width="1300"
          height="1300"
        />
        <div
          class="random-marker"
          id="marker"
          data-x="<%= location.x %>"
          data-y="<%= location.y %>"
          aria-label="Selected drop location"
        ></div>
      </div>
    </main>

    <!-- Bottom bar: primary action -->
    <div class="bottom-bar">
      <button id="fabRandom" class="primary-cta" aria-label="Pick random">
        ðŸŽ² Drop
      </button>
    </div>

    <section class="sheet" id="sheet">
      <button class="sheet-handle" id="sheetToggle">
        <span class="handle-dot"></span>
      </button>

      <div class="sheet-content">
        <div class="control-row">
          <label>
            Marker Color
            <input type="color" id="markerColorPicker" value="#ff0000" />
          </label>

          <label>
            Map
            <select id="mapSelect">
              <option value="current">Chapter 6 â€¢ Season 4</option>
              <option value="og">OG Map</option>
            </select>
          </label>
        </div>

        <button id="installBtn" class="btn btn-secondary" hidden>
          ðŸ“² Install app
        </button>
      </div>
    </section>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // ---- THEME (load saved + button) ----
      const themeBtn = document.getElementById("themeToggle");
      const themeMeta = document.querySelector('meta[name="theme-color"]');

      (function initTheme() {
        const savedTheme = localStorage.getItem("theme");
        if (savedTheme)
          document.documentElement.setAttribute("data-theme", savedTheme);
        setThemeIcon();
        applyThemeMeta();
      })();

      // ADD this haptics helper near the top of your script
      function ping() {
        if (navigator.vibrate) navigator.vibrate(80);
      }

      const sheet = document.getElementById("sheet");
      const sheetToggle = document.getElementById("sheetToggle");
      sheetToggle.addEventListener("click", () => {
        const open = sheet.classList.toggle("open");
        sheetToggle.setAttribute("aria-expanded", String(open));
      });

      function setThemeIcon() {
        const isLight =
          document.documentElement.getAttribute("data-theme") === "light";
        themeBtn.textContent = isLight ? "ðŸŒž" : "ðŸŒ™";
      }
      function applyThemeMeta() {
        const isLight =
          document.documentElement.getAttribute("data-theme") === "light";
        themeMeta.setAttribute("content", isLight ? "#ffffff" : "#0b0226");
      }
      themeBtn.addEventListener("click", () => {
        const current = document.documentElement.getAttribute("data-theme");
        const next = current === "light" ? "dark" : "light";
        document.documentElement.setAttribute("data-theme", next);
        localStorage.setItem("theme", next);
        setThemeIcon();
        applyThemeMeta();
      });

      const locTextEl = document.getElementById("locationText");
      locTextEl.style.cursor = "pointer";
      locTextEl.title = "Tap to copy";
      locTextEl.addEventListener("click", async () => {
        try {
          await navigator.clipboard.writeText(locTextEl.textContent);
        } catch {}
        if (navigator.vibrate) navigator.vibrate(40);
      });

      // --- Maps available ---
      const MAPS = {
        current: {
          src: "/images/fortnite-map.png",
          label: "Chapter 6 â€¢ Season 4",
        },
        og: { src: "/images/fortniteOG.png", label: "OG Map" },
      };

      // --- DOM refs ---
      const marker = document.getElementById("marker");
      const mapImg = document.getElementById("mapImg");

      const mapSelect = document.getElementById("mapSelect");

      function positionMarker(x, y) {
        marker.style.left = x * 100 + "%";
        marker.style.top = y * 100 + "%";
      }

      // Init marker from server-rendered data
      positionMarker(
        parseFloat(marker.dataset.x),
        parseFloat(marker.dataset.y)
      );

      // --- Colour picker persistence ---
      const markerColorPicker = document.getElementById("markerColorPicker");
      const savedColor = localStorage.getItem("markerColor");
      if (savedColor) {
        document.documentElement.style.setProperty(
          "--marker-color",
          savedColor
        );
        markerColorPicker.value = savedColor;
      }
      markerColorPicker.addEventListener("input", (e) => {
        const value = e.target.value;
        document.documentElement.style.setProperty("--marker-color", value);
        localStorage.setItem("markerColor", value);
      });

      // --- Socket (PUBLIC endpoint) ---
      const socket = io();

      // --- Map init (single source of truth) ---
      const savedMapId = localStorage.getItem("mapId");
      const serverMapId = document.body.dataset.currentMap || "current";
      const startMapId = savedMapId || serverMapId;

      function applyMap(mapId) {
        const m = MAPS[mapId] || MAPS.current;
        mapImg.src = m.src;
        mapImg.alt = m.label;
        document.body.dataset.current_map = mapId;
        document.body.dataset.currentMap = mapId;
        mapSelect.value = mapId;
        localStorage.setItem("mapId", mapId);
        socket.emit("joinMap", { mapId });
      }

      for (const opt of mapSelect.options) {
        const id = opt.value;
        if (MAPS[id]) opt.setAttribute("data-src", MAPS[id].src);
      }

      applyMap(startMapId);

      mapSelect.addEventListener("change", (e) => applyMap(e.target.value));

      // FAB: trigger new random
      const fab = document.getElementById("fabRandom");
      fab.addEventListener("click", () => {
        const mapId = document.body.dataset.currentMap || "current";
        socket.emit("newRandom", { mapId });
        ping();
      });

      // Socket updates
      socket.on("update", (loc) => {
        if (loc.mapId && loc.mapId !== document.body.dataset.currentMap) {
          applyMap(loc.mapId);
        }
        document.getElementById("locationText").textContent = loc.id; // pill overlay

        positionMarker(loc.x, loc.y);
        marker.classList.add("bounce-once");
        setTimeout(() => marker.classList.remove("bounce-once"), 500);
        ping();
      });

      // ---- PWA registration + install prompt (robust order) ----
      const installBtn = document.getElementById("installBtn");
      let deferredPrompt = null;

      const isStandalone =
        window.matchMedia("(display-mode: standalone)").matches ||
        window.navigator.standalone === true;
      if (isStandalone) installBtn.hidden = true;

      if ("serviceWorker" in navigator) {
        navigator.serviceWorker.register("/sw.js").then(() => {
          if (
            !navigator.serviceWorker.controller &&
            !sessionStorage.getItem("sw-reload")
          ) {
            navigator.serviceWorker.addEventListener("controllerchange", () => {
              sessionStorage.setItem("sw-reload", "1");
              window.location.reload();
            });
          }
        });
      }

      window.addEventListener("beforeinstallprompt", (e) => {
        console.log("[PWA] beforeinstallprompt");
        e.preventDefault();
        deferredPrompt = e;
        installBtn.hidden = false;
      });

      installBtn.addEventListener("click", async () => {
        if (!deferredPrompt) return;
        deferredPrompt.prompt();
        const { outcome } = await deferredPrompt.userChoice;
        console.log("[PWA] userChoice:", outcome);
        deferredPrompt = null;
        installBtn.hidden = true;
      });

      window.addEventListener("appinstalled", () =>
        console.log("[PWA] appinstalled")
      );
      console.log(
        "[PWA] display-mode:",
        isStandalone ? "standalone" : "browser"
      );
    </script>
  </body>
</html>
