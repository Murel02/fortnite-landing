<!-- views/index.ejs -->
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Fortnite Random Drop</title>
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body>
    <!-- Hero section -->
    <div class="hero">
      <h1>Fortnite Random Drop</h1>
    </div>

    <!-- Controls section -->
    <div class="controls">
      <!-- existing buttons -->
      <button id="randomBtn">Pick a random spot</button>
      <!--<button id="coordBtn">Click the map to get coordinates</button>-->

      <!-- new settings -->
      <label>
        Marker colour:
        <input type="color" id="markerColorPicker" value="#ff0000" />
      </label>
      <!--<label>
        Named locations only:
        <input type="checkbox" id="namedOnlyToggle" checked />
      </label>-->
    </div>

    <!-- Map container -->
    <div class="map-wrapper">
      <div class="map-container">
        <img id="mapImg" src="/images/fortnite-map.png" alt="Fortnite Map" />
        <div
          class="random-marker"
          id="marker"
          data-x="<%= location.x %>"
          data-y="<%= location.y %>"
        ></div>
      </div>
    </div>

    <p class="section-heading" id="locationLabel">
      Your random drop location is: <%= location.id %>
    </p>
    <script src="/socket.io/socket.io.js"></script>

    <script>
      // Grab the marker and position it based on server-rendered data
      const marker = document.getElementById("marker");
      function positionMarker(x, y) {
        marker.style.left = x * 100 + "%";
        marker.style.top = y * 100 + "%";
      }
      positionMarker(
        parseFloat(marker.dataset.x),
        parseFloat(marker.dataset.y)
      );

      // Colour picker persistence (unchanged)
      const markerColorPicker = document.getElementById("markerColorPicker");
      const savedColor = localStorage.getItem("markerColor");
      if (savedColor) {
        document.documentElement.style.setProperty(
          "--marker-color",
          savedColor
        );
        markerColorPicker.value = savedColor;
      }
      markerColorPicker.addEventListener("input", (e) => {
        const value = e.target.value;
        document.documentElement.style.setProperty("--marker-color", value);
        localStorage.setItem("markerColor", value);
      });

      // Connect to Socket.IO
      const socket = io();

      // Update the UI whenever the server broadcasts a new location
      socket.on("update", (loc) => {
        document.getElementById("locationLabel").textContent =
          "Your random drop location is: " + loc.id;
        positionMarker(loc.x, loc.y);
        marker.classList.add("bounce");
        setTimeout(() => marker.classList.remove("bounce"), 800);
      });

      // Emit 'newRandom' when the button is pressed
      document.getElementById("randomBtn").addEventListener("click", () => {
        socket.emit("newRandom");
      });

      // Optional: click‑to‑show coordinates
      const mapImg = document.getElementById("mapImg");
      const coordBtn = document.getElementById("coordBtn");
      if (coordBtn) {
        mapImg.addEventListener("click", (event) => {
          const rect = mapImg.getBoundingClientRect();
          const nx = (event.clientX - rect.left) / rect.width;
          const ny = (event.clientY - rect.top) / rect.height;
          coordBtn.textContent = `x: ${nx.toFixed(2)}, y: ${ny.toFixed(2)}`;
        });
      }
    </script>
  </body>
</html>
