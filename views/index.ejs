<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Fortnite Random Drop</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="/css/style.css" />
  </head>
  <body data-current-map="<%= currentMap || 'current' %>">
    <!-- Header / Hero -->
    <header class="hero container">
      <h1>Fortnite Random Drop</h1>
      <p class="subtitle">Pick a spot and drop in!</p>
    </header>

    <!-- Controls -->
    <section class="controls container">
      <button id="randomBtn" class="btn btn-primary">Pick a random spot</button>

      <label class="control-group">
        <span>Marker colour</span>
        <input type="color" id="markerColorPicker" value="#ff0000" />
      </label>

      <label class="control-group">
        <span>Map</span>
        <select id="mapSelect" aria-label="Choose map">
          <option value="current" data-src="/images/fortnite-map.png">
            Chapter 6 • Season 4
          </option>
          <option value="og" data-src="/images/fortniteOG.png">OG Map</option>
        </select>
      </label>
    </section>

    <!-- Selected location -->
    <p class="section-heading container" id="locationLabel">
      Your random drop location is: <%= location.id %>
    </p>

    <!-- Map -->
    <section class="map-bleed">
      <div class="map-container">
        <img
          id="mapImg"
          src="/images/fortnite-map.png"
          alt="Fortnite Map"
          width="1300"
          height="1300"
        />
        <div
          class="random-marker"
          id="marker"
          data-x="<%= location.x %>"
          data-y="<%= location.y %>"
          aria-label="Selected drop location"
        ></div>
      </div>
    </section>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      // --- Maps available ---
      const MAPS = {
        current: {
          src: "/images/fortnite-map.png",
          label: "Chapter 6 • Season 4",
        },
        og: { src: "/images/fortniteOG.png", label: "OG Map" },
      };

      // --- DOM refs ---
      const marker = document.getElementById("marker");
      const mapImg = document.getElementById("mapImg");
      const locationLabel = document.getElementById("locationLabel");
      const mapSelect = document.getElementById("mapSelect");

      // --- Helper: place marker by normalized coords (0..1) ---
      function positionMarker(x, y) {
        marker.style.left = x * 100 + "%";
        marker.style.top = y * 100 + "%";
      }

      // Init marker from server-rendered data
      positionMarker(
        parseFloat(marker.dataset.x),
        parseFloat(marker.dataset.y)
      );

      // --- Colour picker persistence ---
      const markerColorPicker = document.getElementById("markerColorPicker");
      const savedColor = localStorage.getItem("markerColor");
      if (savedColor) {
        document.documentElement.style.setProperty(
          "--marker-color",
          savedColor
        );
        markerColorPicker.value = savedColor;
      }
      markerColorPicker.addEventListener("input", (e) => {
        const value = e.target.value;
        document.documentElement.style.setProperty("--marker-color", value);
        localStorage.setItem("markerColor", value);
      });

      // --- Socket ---
      const socket = io();

      // --- Map init (single source of truth) ---
      const savedMapId = localStorage.getItem("mapId");
      const serverMapId = document.body.dataset.currentMap || "current";
      const startMapId = savedMapId || serverMapId;

      function applyMap(mapId) {
        const m = MAPS[mapId] || MAPS.current;
        mapImg.src = m.src;
        mapImg.alt = m.label;
        document.body.dataset.current_map = mapId; // internal safety
        document.body.dataset.currentMap = mapId; // used elsewhere
        mapSelect.value = mapId;
        localStorage.setItem("mapId", mapId);

        // join that map's room on the server
        socket.emit("joinMap", { mapId });
      }

      // Ensure <option> has src attributes (not strictly needed but nice)
      for (const opt of mapSelect.options) {
        const id = opt.value;
        if (MAPS[id]) opt.setAttribute("data-src", MAPS[id].src);
      }

      // Apply starting map and join its room
      applyMap(startMapId);

      // Dropdown: switch room + swap image
      mapSelect.addEventListener("change", (e) => {
        applyMap(e.target.value);
      });

      // Roll a new spot inside the user's current room
      document.getElementById("randomBtn").addEventListener("click", () => {
        const mapId = document.body.dataset.currentMap || "current";
        socket.emit("newRandom", { mapId });
      });

      // Receive updates for the current room
      socket.on("update", (loc) => {
        if (loc.mapId && loc.mapId !== document.body.dataset.currentMap) {
          applyMap(loc.mapId);
        }
        locationLabel.textContent = "Your random drop location is: " + loc.id;
        positionMarker(loc.x, loc.y);
        marker.classList.add("bounce-once");
        setTimeout(() => marker.classList.remove("bounce-once"), 500);
      });

      // Optional: click map to preview coords
      const coordBtn = document.getElementById("coordBtn");
      if (coordBtn) {
        mapImg.addEventListener("click", (event) => {
          const rect = mapImg.getBoundingClientRect();
          const nx = (event.clientX - rect.left) / rect.width;
          const ny = (event.clientY - rect.top) / rect.height;
          coordBtn.textContent = `x: ${nx.toFixed(2)}, y: ${ny.toFixed(2)}`;
        });
      }
    </script>
  </body>
</html>
